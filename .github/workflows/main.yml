name: CI/CD - Voting App

on:
  push:
    branches: [ main ]
    paths:
      - "vote/**"
      - "result/**"
      - "worker/**"
      - "K8s/**"
      - ".github/workflows/main.yml"
  workflow_dispatch:

# Prevent overlapping deploys
concurrency:
  group: ci-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          set -euo pipefail
          curl -sSL -o kubectl https://dl.k8s.io/release/$(curl -sSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
          install -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Setup kubeconfig from base64 secret
        env:
          KUBECONFIG_CI_B64: ${{ secrets.KUBECONFIG_CI_B64 }}
        run: |
          set -euo pipefail
          if [ -z "${KUBECONFIG_CI_B64:-}" ]; then
            echo "KUBECONFIG_CI_B64 is empty"; exit 1
          fi
          KUBECONFIG_FILE="$RUNNER_TEMP/kubeconfig"
          # strip CR just in case and decode
          echo "${KUBECONFIG_CI_B64}" | tr -d '\r' | base64 -d > "${KUBECONFIG_FILE}"
          echo "KUBECONFIG=${KUBECONFIG_FILE}" >> "$GITHUB_ENV"
          head -n1 "${KUBECONFIG_FILE}"

      - name: Quick connectivity (namespace-scoped only)
        run: |
          set -euo pipefail
          kubectl -n voting get deploy >/dev/null || true

      - name: Apply manifests (namespace-scoped only)
        run: |
          set -euo pipefail
          # Postgres (PVC/Deploy/Service/Secret are namespace-scoped)
          kubectl -n voting apply -f K8s/base/postgres/

          # Redis
          kubectl -n voting apply -f K8s/base/redis/

          # Vote / Result / Worker
          kubectl -n voting apply -f K8s/base/vote/
          kubectl -n voting apply -f K8s/base/result/
          kubectl -n voting apply -f K8s/base/worker/

          # Ingress (Ingress is namespace-scoped)
          kubectl -n voting apply -f K8s/base/ingress/

          # HPA (if present)
          if [ -d K8s/base/hpa ]; then
            kubectl -n voting apply -f K8s/base/hpa/ || true
          fi

      - name: Rollout status
        run: |
          set -euo pipefail
          for d in postgres redis vote result worker; do
            kubectl -n voting rollout status deploy/$d --timeout=180s || true
          done

      - name: Show status
        run: |
          kubectl -n voting get deploy,svc,pods -o wide
